
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/querying_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_querying_data.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_querying_data.py:


===================
Querying PUNCH Data
===================

A notebook guide to querying and loading PUNCH data using SunPy.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

This notebook provides a guide on how to use tools to query PUNCH data from the VSO / SDAC using Python tools, and how to load and display this data using SunPy.

.. GENERATED FROM PYTHON SOURCE LINES 14-15

Load libraries

.. GENERATED FROM PYTHON SOURCE LINES 15-20

.. code-block:: Python


    from sunpy.map import Map
    from sunpy.net import Fido
    from sunpy.net import attrs as a








.. GENERATED FROM PYTHON SOURCE LINES 21-27

Data querying
------------

With a range of dates and a PUNCH instrument in mind, we can begin querying data. Here we'll consider data from the first two minutes of the first of June, and focus on data from WFI-2 only.

We can construct a query using the Fido tool, specifying search attributes:

.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: Python

    time_range = a.Time('2025/06/01 00:00:00', '2025/06/01 00:02:00')
    result = Fido.search(time_range, a.Instrument('WFI-2'))
    result






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    Results from 1 Provider:</br></br>6 Results from the VSOClient:</br><div><i>VSOQueryResponseTable length=6</i>
    <table id="table140575259060720" class="table-striped table-bordered table-condensed">
    <thead><tr><th>Start Time</th><th>End Time</th><th>Instrument</th><th>Wavelength</th><th>Provider</th><th>Physobs</th><th>Wavetype</th><th>Extent X</th><th>Extent Y</th><th>Extent Width</th><th>Extent Length</th><th>Extent Type</th><th>Size</th></tr></thead>
    <thead><tr><th></th><th></th><th></th><th>nm</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th>Mibyte</th></tr></thead>
    <thead><tr><th>Time</th><th>Time</th><th>str5</th><th>float64[2]</th><th>str10</th><th>str9</th><th>str7</th><th>str7</th><th>str7</th><th>str17</th><th>str16</th><th>str11</th><th>float64</th></tr></thead>
    <tr><td>2025-06-01 00:00:17.000</td><td>2025-06-01 00:00:41.000</td><td>WFI-2</td><td>530.0 .. 530.0</td><td>SDAC_PUNCH</td><td>intensity</td><td>visible</td><td>19.6673</td><td>14.4731</td><td>0.195555552840233</td><td>50.0622215270996</td><td>FAR_OFF_SUN</td><td>1.51074</td></tr>
    <tr><td>2025-06-01 00:00:17.000</td><td>2025-06-01 00:00:41.000</td><td>WFI-2</td><td>530.0 .. 530.0</td><td>SDAC_PUNCH</td><td>intensity</td><td>visible</td><td>18.8726</td><td>14.7681</td><td>0.782222211360931</td><td>50.0622215270996</td><td>FAR_OFF_SUN</td><td>6.30371</td></tr>
    <tr><td>2025-06-01 00:00:29.000</td><td>2025-06-01 00:00:41.000</td><td>WFI-2</td><td>530.0 .. 530.0</td><td>SDAC_PUNCH</td><td>intensity</td><td>visible</td><td>19.6673</td><td>14.4731</td><td>0.195555552840233</td><td>50.0622215270996</td><td>FAR_OFF_SUN</td><td>1.51074</td></tr>
    <tr><td>2025-06-01 00:00:29.000</td><td>2025-06-01 00:00:41.000</td><td>WFI-2</td><td>530.0 .. 530.0</td><td>SDAC_PUNCH</td><td>intensity</td><td>visible</td><td>18.9615</td><td>14.7091</td><td>0.782222211360931</td><td>50.0622215270996</td><td>FAR_OFF_SUN</td><td>6.64941</td></tr>
    <tr><td>2025-06-01 00:00:29.000</td><td>2025-06-01 00:00:41.000</td><td>WFI-2</td><td>530.0 .. 530.0</td><td>SDAC_PUNCH</td><td>intensity</td><td>visible</td><td>18.9615</td><td>14.7091</td><td>0.782222211360931</td><td>50.0622215270996</td><td>FAR_OFF_SUN</td><td>6.30859</td></tr>
    <tr><td>2025-06-01 00:00:29.000</td><td>2025-06-01 00:00:41.000</td><td>WFI-2</td><td>530.0 .. 530.0</td><td>SDAC_PUNCH</td><td>intensity</td><td>visible</td><td>19.6673</td><td>14.4731</td><td>0.195555552840233</td><td>50.0622215270996</td><td>FAR_OFF_SUN</td><td>1.51074</td></tr>
    </table></div></br>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 34-36

This results in a table of available data products that match the search criteria.
Next, let's download the first file from this list of results:

.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: Python

    files = Fido.fetch(result[0][0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Files Downloaded:   0%|          | 0/1 [00:00<?, ?file/s]
    PUNCH_L0_CR2_20250601000029_v0a.fits:   0%|          | 0.00/1.58M [00:00<?, ?B/s]
    PUNCH_L0_CR2_20250601000029_v0a.fits:   0%|          | 1.02k/1.58M [00:00<07:51, 3.36kB/s]
    PUNCH_L0_CR2_20250601000029_v0a.fits:  13%|█▎        | 200k/1.58M [00:00<00:02, 565kB/s]  
    PUNCH_L0_CR2_20250601000029_v0a.fits:  59%|█████▊    | 928k/1.58M [00:00<00:00, 2.48MB/s]
                                                                                                 Files Downloaded: 100%|██████████| 1/1 [00:01<00:00,  1.09s/file]    Files Downloaded: 100%|██████████| 1/1 [00:01<00:00,  1.09s/file]




.. GENERATED FROM PYTHON SOURCE LINES 41-43

This returns a list of paths to files that have been downloaded. Note that the Fido.fetch tool can specify a particular download directory for larger data searches.
With that file downloaded, we can load it into a SunPy map object, and display it.

.. GENERATED FROM PYTHON SOURCE LINES 45-48

.. code-block:: Python

    map = Map(files[0])
    map.peek()




.. image-sg:: /auto_examples/images/sphx_glr_querying_data_001.png
   :alt: PUNCH - WFI-2 $530 \; \mathrm{nm}$ 2025-06-01 00:00:29
   :srcset: /auto_examples/images/sphx_glr_querying_data_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 49-52

And that's it! From here the data is encapsulated into a SunPy map object, which supports that framework for plotting, coordinate transformations, etc.

Of course this is just one path, you could always load the data using Astropy fits tools, load it into an NDCube, or any other FITS-compliant tool.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 11.931 seconds)


.. _sphx_glr_download_auto_examples_querying_data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/punch-mission/punchbowl/binder?urlpath=lab/tree/notebooks/auto_examples/querying_data.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: querying_data.ipynb <querying_data.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: querying_data.py <querying_data.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: querying_data.zip <querying_data.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
